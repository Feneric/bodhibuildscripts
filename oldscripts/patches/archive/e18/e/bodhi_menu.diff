Common subdirectories: /home/jeff/e17_src/e/src/bin/.deps and /home/jeff/a/src/bin/.deps
Common subdirectories: /home/jeff/e17_src/e/src/bin/e_fm and /home/jeff/a/src/bin/e_fm
diff -uN /home/jeff/e17_src/e/src/bin/e_int_menus.c /home/jeff/a/src/bin/e_int_menus.c
--- /home/jeff/e17_src/e/src/bin/e_int_menus.c	2012-12-02 21:14:19.308846002 -0600
+++ /home/jeff/a/src/bin/e_int_menus.c	2012-12-02 21:32:25.528846001 -0600
@@ -63,6 +63,13 @@
 static Efreet_Menu *_e_int_menus_apps_thread_new(E_Menu *m, const char *dir);
 static Eina_Bool   _e_int_menus_efreet_desktop_cache_update(void *d, int type, void *e);
 //static void _e_int_menus_apps_drag_finished(E_Drag *drag, int dropped __UNUSED__);
+static void _e_int_menus_bodhi_about(void *data __UNUSED__, E_Menu *m __UNUSED__, E_Menu_Item *mi __UNUSED__);
+static void _e_int_menus_bodhi_about(void *data __UNUSED__, E_Menu *m __UNUSED__, E_Menu_Item *mi __UNUSED__);
+static void _e_int_menus_bodhi_add_software(void *data __UNUSED__, E_Menu *m __UNUSED__, E_Menu_Item *mi __UNUSED__);
+static void _e_int_menus_bodhi_art_work(void *data __UNUSED__, E_Menu *m __UNUSED__, E_Menu_Item *mi __UNUSED__);
+static void _e_int_menus_bodhi_quick_start(void *data __UNUSED__, E_Menu *m __UNUSED__, E_Menu_Item *mi __UNUSED__);
+
+
 
 /* local subsystem globals */
 static Eina_Hash *_e_int_menus_augmentation = NULL;
@@ -217,6 +224,35 @@
    if (l) _e_int_menus_augmentation_add(m, l);
 
    subm = e_menu_new();
+   mi = e_menu_item_new(m);
+   e_menu_item_label_set(mi, _("Bodhi Linux"));
+   e_util_menu_item_theme_icon_set(mi, "bodhi");
+   e_menu_item_submenu_set(mi, subm);
+
+   mi = e_menu_item_new(subm);
+   e_menu_item_label_set(mi, _("About"));
+   e_util_menu_item_theme_icon_set(mi, "help-about");
+   e_menu_item_callback_set(mi, _e_int_menus_bodhi_about, NULL);
+
+   mi = e_menu_item_new(subm);
+   e_menu_item_label_set(mi, _("Quick Start"));
+   e_util_menu_item_theme_icon_set(mi, "help-faq");
+   e_menu_item_callback_set(mi, _e_int_menus_bodhi_quick_start, NULL);
+
+   mi = e_menu_item_new(subm);
+   e_menu_item_separator_set(mi, 1);
+
+   mi = e_menu_item_new(subm);
+   e_menu_item_label_set(mi, _("Add Software"));
+   e_util_menu_item_theme_icon_set(mi, "system-software-install");
+   e_menu_item_callback_set(mi, _e_int_menus_bodhi_add_software, NULL);
+
+   mi = e_menu_item_new(subm);
+   e_menu_item_label_set(mi, _("Art Work"));
+   e_util_menu_item_theme_icon_set(mi, "preferences-desktop-theme");
+   e_menu_item_callback_set(mi, _e_int_menus_bodhi_art_work, NULL);
+
+   subm = e_menu_new();
    dat->enlightenment = subm;
 
    l = _e_int_menus_augmentation_find("enlightenment/0");
@@ -603,6 +639,22 @@
    if (about) e_theme_about_show(about);
 }
 
+#define BODHI_VERSION "     Testing"
+#define BODHI_ABOUT_TITLE "About Bodhi     "
+#define BODHI_ABOUT_TEXT "Bodhi Linux - Enlightened Linux Desktop"
+#define BODHI_ABOUT_AUTHORS \
+   "Jeff Hoogland (Jef91)<br>Ken LaBuda (Trace)<br>" \
+     "Jason Peel (Jarope)<br>Christopher Michael (devilhorns)<br>" \
+     "Joris van Dijk (aeonius)<br>Anthony Cervantes (AntCer)<br>Stephen Houston (okra)<br>" \
+     "Agustin Verdegal (Agust)<br>Bob Eley<br>Jason Thomas (Tristam)<br>" \
+     "Kaleb Elwert (belak)<br>Kristi Elvide (TheWife)<br>" \
+     "Karen Hoogland<br>Micah Denn (M1C4HTRON13)<br>" \
+     "Robert Wiley (y_lee)<br>Gareth Williams (hippytaff)<br>Víctor Parra García (esmirlin)<br>" \
+     "Timmy Larsson (Timmy)<br>Renato Rener (r1to)<br>" \
+     "David La Monaca (cercamon)<br>Alexandre Eldredge (Spoonite)<br>Jose Manimala (Ittan)<br>Erik Zervas (Tolcarael)<br>" \
+     "Andreas Pachler<br>Georg Eckert<br>Michael Rokosz (mrokosz)<br>Adrian Koryl (husarz)<br>F. Junger<br>Joao Teixeira<br>Matt Carter (Matt)<br>Hendra Kusuma" 
+
+
 /*
    static void
    _e_int_menus_fwin_favorites_item_cb(void *data, E_Menu *m, E_Menu_Item *mi)
@@ -1777,3 +1829,61 @@
    e_menu_item_label_set(mi, label);
 }
 
+static void 
+_e_int_menus_bodhi_about(void *data __UNUSED__, E_Menu *m __UNUSED__, E_Menu_Item *mi __UNUSED__) 
+{
+   E_Obj_Dialog *dlg;
+   E_Container *con;
+
+   con = e_container_current_get(e_manager_current_get());
+   dlg = e_obj_dialog_new(con, BODHI_ABOUT_TITLE, "E", "_about");
+   if (!dlg) return;
+   e_obj_dialog_obj_theme_set(dlg, "base/theme/about", "e/widgets/about/main");
+   e_obj_dialog_obj_part_text_set(dlg, "e.text.label", _("Close"));
+   e_obj_dialog_obj_part_text_set(dlg, "e.text.title", 
+                                 BODHI_ABOUT_TITLE);
+   e_obj_dialog_obj_part_text_set(dlg, "e.text.version", 
+                                  BODHI_VERSION);
+   e_obj_dialog_obj_part_text_set(dlg, "e.textblock.about", 
+                                  BODHI_ABOUT_TEXT);
+   e_obj_dialog_obj_part_text_set(dlg, "e.textblock.authors", 
+                                  BODHI_ABOUT_AUTHORS);
+
+   e_obj_dialog_show((E_Obj_Dialog *)dlg);
+   e_obj_dialog_icon_set((E_Obj_Dialog *)dlg, "help-about");
+}
+
+static void 
+_e_int_menus_bodhi_quick_start(void *data __UNUSED__, E_Menu *m __UNUSED__, E_Menu_Item *mi __UNUSED__) 
+{
+   E_Zone *zone;
+   char buff[PATH_MAX];
+
+   snprintf(buff, sizeof(buff), "enlightenment_open "
+            "file:///usr/share/bodhi/quickstart/quickstartEN/index.html");
+   zone = e_util_zone_current_get(e_manager_current_get());
+   e_exec(zone, NULL, buff, NULL, NULL);
+}
+
+static void 
+_e_int_menus_bodhi_add_software(void *data __UNUSED__, E_Menu *m __UNUSED__, E_Menu_Item *mi __UNUSED__) 
+{
+   E_Zone *zone;
+   char buff[PATH_MAX];
+
+   snprintf(buff, sizeof(buff), "enlightenment_open http://software.bodhilinux.com");
+   zone = e_util_zone_current_get(e_manager_current_get());
+   e_exec(zone, NULL, buff, NULL, NULL);
+}
+
+static void 
+_e_int_menus_bodhi_art_work(void *data __UNUSED__, E_Menu *m __UNUSED__, E_Menu_Item *mi __UNUSED__) 
+{
+   E_Zone *zone;
+   char buff[PATH_MAX];
+
+   snprintf(buff, sizeof(buff), "enlightenment_open http://art.bodhilinux.com");
+   zone = e_util_zone_current_get(e_manager_current_get());
+   e_exec(zone, NULL, buff, NULL, NULL);
+}
+
diff -uN /home/jeff/e17_src/e/src/bin/e_msgbus.c /home/jeff/a/src/bin/e_msgbus.c
--- /home/jeff/e17_src/e/src/bin/e_msgbus.c	2012-12-02 20:42:05.532846001 -0600
+++ /home/jeff/a/src/bin/e_msgbus.c	2012-12-02 21:25:22.336846001 -0600
@@ -43,6 +43,7 @@
 E_MSGBUS_WIN_ACTION_CB_PROTO(uniconify);
 E_MSGBUS_WIN_ACTION_CB_PROTO(maximize);
 E_MSGBUS_WIN_ACTION_CB_PROTO(unmaximize);
+E_MSGBUS_WIN_ACTION_CB_PROTO(vkbd);
 
 /* local subsystem globals */
 static E_Msgbus_Data *_e_msgbus_data = NULL;
@@ -132,6 +133,7 @@
    e_dbus_interface_method_add(iface, "Uniconify", "i", "", _e_msgbus_window_uniconify_cb);
    e_dbus_interface_method_add(iface, "Maximize", "i", "", _e_msgbus_window_maximize_cb);
    e_dbus_interface_method_add(iface, "Unmaximize", "i", "", _e_msgbus_window_unmaximize_cb);
+   e_dbus_interface_method_add(iface, "Vkbd", "i", "", _e_msgbus_window_vkbd_cb);
 
    return 1;
 }
@@ -485,3 +487,10 @@
 E_MSGBUS_WIN_ACTION_CB_BEGIN(unmaximize)
 e_border_unmaximize(bd, E_MAXIMIZE_BOTH);
 E_MSGBUS_WIN_ACTION_CB_END
+
+E_MSGBUS_WIN_ACTION_CB_BEGIN(vkbd)
+if (bd->client.vkbd.state == ECORE_X_VIRTUAL_KEYBOARD_STATE_OFF)
+ecore_x_e_virtual_keyboard_state_set(bd->client.win, ECORE_X_VIRTUAL_KEYBOARD_STATE_ON);
+else
+ecore_x_e_virtual_keyboard_state_set(bd->client.win, ECORE_X_VIRTUAL_KEYBOARD_STATE_OFF);
+E_MSGBUS_WIN_ACTION_CB_END
Common subdirectories: /home/jeff/e17_src/e/src/bin/.svn and /home/jeff/a/src/bin/.svn
